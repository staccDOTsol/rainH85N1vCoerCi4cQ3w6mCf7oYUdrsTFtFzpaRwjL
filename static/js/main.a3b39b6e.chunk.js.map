{"version":3,"sources":["candy-machine.ts","connection.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","undefined","txs","userTokenAccount","transaction","mintOneToken","beforeTransactions","afterTransactions","setupState","userPayingAccountAddress","remainingAccounts","push","getNetworkToken","gatekeeperNetwork","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPDA","getAccountInfo","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txns","t","mintTxn","mintTxId","metadataKey","ms","DEFAULT_TIMEOUT","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","all","number","result","getUnixTs","Date","getTime","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","onSignature","context","e","CTAButton","styled","Button","MintButton","onMint","isMinting","isEnded","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","onClick","variant","CircularProgress","cluster","process","splTokenName","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","MintButtonContainer","SolExplorerLink","a","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","Home","props","connection2","fanoutSdk","fanoutAccount","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","setItemsAvailable","setItemsRedeemed","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","setIsPresale","isWLOnly","setIsWLOnly","open","severity","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","useWallet","setCandyMachine","rpcUrl","rpcHost","useMemo","signTransaction","fanout","members","setMembers","staked","setStaked","setTotal","Connection","FanoutClient","Fanout","totalShares","totalStakedShares","totalMembers","setInterval","Math","random","refreshCandyMachineState","useCallback","cndy","divider","Array","join","LAMPORTS_PER_SOL","presale","discountPrice","getTokenAccountBalance","tokenBalance","uiAmount","endSettingType","date","toDate","amount","limit","min","collectionPDAAccount","txnEstimate","hideDuration","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","connected","setupMint","txTimeout","mintResult","metadataStatus","msg","code","indexOf","getBalance","shares","setShares","preventDefault","target","distributeToken","distributeForMint","membershipMint","member","fanoutMint","parseFloat","stakeTokenMember","unstakeTokenMember","toLocaleString","elevation","Input","style","color","fontSize","backgroundColor","type","onInput","label","src","alt","now","clusterUrl","options","autoShowModal","href","Snackbar","autoHideDuration","onClose","Alert","require","getCandyMachineId","network","theme","createTheme","palette","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"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","file":"static/js/main.a3b39b6e.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n    SystemProgram,\n    Transaction,\n    SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n    CIVIC,\n    getAtaForMint,\n    getNetworkExpire,\n    getNetworkToken,\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n    authority: anchor.web3.PublicKey;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    treasury: anchor.web3.PublicKey;\n    tokenMint: null | anchor.web3.PublicKey;\n    isSoldOut: boolean;\n    isActive: boolean;\n    isPresale: boolean;\n    isWhitelistOnly: boolean;\n    goLiveDate: anchor.BN;\n    price: anchor.BN;\n    gatekeeper: null | {\n        expireOnUse: boolean;\n        gatekeeperNetwork: anchor.web3.PublicKey;\n    };\n    endSettings: null | {\n        number: anchor.BN;\n        endSettingType: any;\n    };\n    whitelistMintSettings: null | {\n        mode: any;\n        mint: anchor.web3.PublicKey;\n        presale: boolean;\n        discountPrice: null | anchor.BN;\n    };\n    hiddenSettings: null | {\n        name: string;\n        uri: string;\n        hash: Uint8Array;\n    };\n    retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n    id: anchor.web3.PublicKey;\n    program: anchor.Program;\n    state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n    txid: anchor.web3.TransactionSignature,\n    timeout: number,\n    connection: anchor.web3.Connection,\n    queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n    let done = false;\n    let status: anchor.web3.SignatureStatus | null | void = {\n        slot: 0,\n        confirmations: 0,\n        err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n        setTimeout(() => {\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({ timeout: true });\n        }, timeout);\n\n        while (!done && queryStatus) {\n            // eslint-disable-next-line no-loop-func\n            (async () => {\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid,\n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) {\n        connection.removeSignatureListener(subId);\n    }\n    done = true;\n    console.log('Returning status', status);\n    return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new anchor.web3.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n};\n\nexport const getCandyMachineState = async (\n    anchorWallet: anchor.Wallet,\n    candyMachineId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: 'processed',\n    });\n\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    return {\n        id: candyMachineId,\n        program,\n        state: {\n            authority: state.authority,\n            itemsAvailable,\n            itemsRedeemed,\n            itemsRemaining,\n            isSoldOut: itemsRemaining === 0,\n            isActive: false,\n            isPresale: false,\n            isWhitelistOnly: false,\n            goLiveDate: state.data.goLiveDate,\n            treasury: state.wallet,\n            tokenMint: state.tokenMint,\n            gatekeeper: state.data.gatekeeper,\n            endSettings: state.data.endSettings,\n            whitelistMintSettings: state.data.whitelistMintSettings,\n            hiddenSettings: state.data.hiddenSettings,\n            price: state.data.price,\n            retainAuthority: state.data.retainAuthority,\n        },\n    };\n};\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from('edition'),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport const getCandyMachineCreator = async (\n    candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n        CANDY_MACHINE_PROGRAM,\n    );\n};\n\nexport const getCollectionPDA = async (\n    candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n    return await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n        CANDY_MACHINE_PROGRAM,\n    );\n};\n\nexport interface CollectionData {\n    mint: anchor.web3.PublicKey;\n    candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n    mint: anchor.web3.PublicKey,\n    newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from('metadata'),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from('collection_authority'),\n                newAuthority.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID,\n        )\n    )[0];\n};\n\nexport type SetupState = {\n    mint: anchor.web3.Keypair;\n    userTokenAccount: anchor.web3.PublicKey;\n    transaction: string;\n};\n\nexport const createAccountsForMint = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n    const mint = anchor.web3.Keypair.generate();\n    const userTokenAccountAddress = (\n        await getAtaForMint(mint.publicKey, payer)\n    )[0];\n\n    const signers: anchor.web3.Keypair[] = [mint];\n    const instructions = [\n        anchor.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: MintLayout.span,\n            lamports:\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                    MintLayout.span,\n                ),\n            programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            0,\n            payer,\n            payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n            userTokenAccountAddress,\n            payer,\n            payer,\n            mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            userTokenAccountAddress,\n            payer,\n            [],\n            1,\n        ),\n    ];\n\n    return {\n        mint: mint,\n        userTokenAccount: userTokenAccountAddress,\n        transaction: (\n            await sendTransactions(\n                candyMachine.program.provider.connection,\n                candyMachine.program.provider.wallet,\n                [instructions],\n                [signers],\n                SequenceType.StopOnFailure,\n                'singleGossip',\n                () => {},\n                () => false,\n                undefined,\n                [],\n                [],\n            )\n        ).txs[0].txid,\n    };\n};\n\ntype MintResult = {\n    mintTxId: string;\n    metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachineAccount,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n    setupState?: SetupState,\n): Promise<MintResult | null> => {\n    const userTokenAccountAddress = (\n        await getAtaForMint(mint.publicKey, payer)\n    )[0];\n\n    const userPayingAccountAddress = candyMachine.state.tokenMint\n        ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n        : payer;\n\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const instructions = [];\n    const signers: anchor.web3.Keypair[] = [];\n    console.log('SetupState: ', setupState);\n    if (!setupState) {\n        signers.push(mint);\n        instructions.push(\n            ...[\n                anchor.web3.SystemProgram.createAccount({\n                    fromPubkey: payer,\n                    newAccountPubkey: mint.publicKey,\n                    space: MintLayout.span,\n                    lamports:\n                        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n                            MintLayout.span,\n                        ),\n                    programId: TOKEN_PROGRAM_ID,\n                }),\n                Token.createInitMintInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    0,\n                    payer,\n                    payer,\n                ),\n                createAssociatedTokenAccountInstruction(\n                    userTokenAccountAddress,\n                    payer,\n                    payer,\n                    mint.publicKey,\n                ),\n                Token.createMintToInstruction(\n                    TOKEN_PROGRAM_ID,\n                    mint.publicKey,\n                    userTokenAccountAddress,\n                    payer,\n                    [],\n                    1,\n                ),\n            ],\n        );\n    }\n\n    if (candyMachine.state.gatekeeper) {\n        remainingAccounts.push({\n            pubkey: (\n                await getNetworkToken(\n                    payer,\n                    candyMachine.state.gatekeeper.gatekeeperNetwork,\n                )\n            )[0],\n            isWritable: true,\n            isSigner: false,\n        });\n\n        if (candyMachine.state.gatekeeper.expireOnUse) {\n            remainingAccounts.push({\n                pubkey: CIVIC,\n                isWritable: false,\n                isSigner: false,\n            });\n            remainingAccounts.push({\n                pubkey: (\n                    await getNetworkExpire(\n                        candyMachine.state.gatekeeper.gatekeeperNetwork,\n                    )\n                )[0],\n                isWritable: false,\n                isSigner: false,\n            });\n        }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n        const mint = new anchor.web3.PublicKey(\n            candyMachine.state.whitelistMintSettings.mint,\n        );\n\n        const whitelistToken = (await getAtaForMint(mint, payer))[0];\n        remainingAccounts.push({\n            pubkey: whitelistToken,\n            isWritable: true,\n            isSigner: false,\n        });\n\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n            remainingAccounts.push({\n                pubkey: mint,\n                isWritable: true,\n                isSigner: false,\n            });\n            remainingAccounts.push({\n                pubkey: payer,\n                isWritable: false,\n                isSigner: true,\n            });\n        }\n    }\n\n    if (candyMachine.state.tokenMint) {\n        remainingAccounts.push({\n            pubkey: userPayingAccountAddress,\n            isWritable: true,\n            isSigner: false,\n        });\n        remainingAccounts.push({\n            pubkey: payer,\n            isWritable: false,\n            isSigner: true,\n        });\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n        candyMachineAddress,\n    );\n\n    console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n    instructions.push(\n        await candyMachine.program.instruction.mintNft(creatorBump, {\n            accounts: {\n                candyMachine: candyMachineAddress,\n                candyMachineCreator,\n                payer: payer,\n                wallet: candyMachine.state.treasury,\n                mint: mint.publicKey,\n                metadata: metadataAddress,\n                masterEdition,\n                mintAuthority: payer,\n                updateAuthority: payer,\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                tokenProgram: TOKEN_PROGRAM_ID,\n                systemProgram: SystemProgram.programId,\n                rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n                clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n                recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n                instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            remainingAccounts:\n                remainingAccounts.length > 0 ? remainingAccounts : undefined,\n        }),\n    );\n\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n    const collectionPDAAccount =\n        await candyMachine.program.provider.connection.getAccountInfo(\n            collectionPDA,\n        );\n\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n        try {\n            const collectionData =\n                (await candyMachine.program.account.collectionPda.fetch(\n                    collectionPDA,\n                )) as CollectionData;\n            console.log(collectionData);\n            const collectionMint = collectionData.mint;\n            const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n                collectionMint,\n                collectionPDA,\n            );\n            console.log(collectionMint);\n            if (collectionMint) {\n                const collectionMetadata = await getMetadata(collectionMint);\n                const collectionMasterEdition = await getMasterEdition(collectionMint);\n                console.log('Collection PDA: ', collectionPDA.toBase58());\n                console.log('Authority: ', candyMachine.state.authority.toBase58());\n                instructions.push(\n                    await candyMachine.program.instruction.setCollectionDuringMint({\n                        accounts: {\n                            candyMachine: candyMachineAddress,\n                            metadata: metadataAddress,\n                            payer: payer,\n                            collectionPda: collectionPDA,\n                            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n                            instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n                            collectionMint,\n                            collectionMetadata,\n                            collectionMasterEdition,\n                            authority: candyMachine.state.authority,\n                            collectionAuthorityRecord,\n                        },\n                    }),\n                );\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const instructionsMatrix = [instructions];\n    const signersMatrix = [signers];\n\n    try {\n        const txns = (\n            await sendTransactions(\n                candyMachine.program.provider.connection,\n                candyMachine.program.provider.wallet,\n                instructionsMatrix,\n                signersMatrix,\n                SequenceType.StopOnFailure,\n                'singleGossip',\n                () => {},\n                () => false,\n                undefined,\n                beforeTransactions,\n                afterTransactions,\n            )\n        ).txs.map(t => t.txid);\n        const mintTxn = txns[0];\n        return {\n            mintTxId: mintTxn,\n            metadataKey: metadataAddress,\n        };\n    } catch (e) {\n        console.log(e);\n    }\n    return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n      partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n            successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[] | Transaction,\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n          // fee payed by the wallet owner\n          wallet.publicKey,\n          ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n                                              signedTransaction,\n                                              connection,\n                                              timeout = DEFAULT_TIMEOUT,\n                                            }: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachineAccount} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine?: CandyMachineAccount;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {\n    Commitment,\n    Connection,\n    PublicKey,\n    Transaction,\n    LAMPORTS_PER_SOL\n} from \"@solana/web3.js\";\nimport {\n    Fanout,\n    FanoutClient,\n    FanoutMembershipMintVoucher,\n    FanoutMembershipVoucher,\n    FanoutMint,\n    MembershipModel\n} from \"@glasseaters/hydra-sdk\";\n\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\nimport {useWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip, Input, Button} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {AlertState, getAtaForMint, toDate} from './utils';\nimport {MintButton} from './MintButton';\nimport {\n    awaitTransactionSignatureConfirmation,\n    CANDY_MACHINE_PROGRAM,\n    CandyMachineAccount,\n    createAccountsForMint,\n    getCandyMachineState,\n    getCollectionPDA,\n    mintOneToken,\n    SetupState,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: right;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n\n  h1 {\n    margin: 0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0, 0, 0, 0.5);\n  background-color: var(--main-text-color) !important;\n\n  > div.MuiLinearProgress-barColorPrimary {\n    background-color: var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nexport interface HomeProps {\n    candyMachineId?: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n    network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\n    const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n    const wallet = useWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n\n    const rpcUrl = props.rpcHost;\n    const solFeesEstimation = 0.012; // approx of account creation fees\n\n    const anchorWallet = useMemo(() => {\n        if (\n            !wallet ||\n            !wallet.publicKey ||\n            !wallet.signAllTransactions ||\n            !wallet.signTransaction\n        ) {\n            return;\n        }\n\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction,\n        } as anchor.Wallet;\n    }, [wallet]);\n    var connection2: Connection;\n    var fanoutSdk;\n\n    var fanoutAccount;\n    const fanout = new PublicKey(\"9uGm3dGEATAvntW1ozy5C2PgnzLKqrB1VdCErT8GajkR\")\n    const [members, setMembers] = useState<number>(0);\n    const [staked, setStaked] = useState<number>(0);\n    const [total, setTotal] = useState<number>(0);\n  \n    if (anchorWallet){\n\n        setTimeout(async function(){\n             connection2 = new Connection('https://ssc-dao.genesysgo.net/', \"confirmed\");\n          \n           fanoutSdk = new FanoutClient(\n            connection2,\n            anchorWallet\n          );\n           fanoutAccount = await fanoutSdk.fetch<Fanout>(\n            fanout as PublicKey,\n            \n            Fanout\n          )\n          \n\n          try {\n            // @ts-ignore\n  setTotal(((new anchor.BN(fanoutAccount?.totalShares))).toNumber())\n  // @ts-ignore\n    setStaked(((new anchor.BN(fanoutAccount?.totalStakedShares ))).toNumber()/ 10 ** 9)\n    // @ts-ignore\n    setMembers(((new anchor.BN(fanoutAccount?.totalMembers))).toNumber())\n            }\n            catch (err){\n                console.log(err)\n            }\n\n        }, 5000)\n        setInterval(async function(){\n            connection2 = new Connection('https://ssc-dao.genesysgo.net/', \"confirmed\");\n          \n            fanoutSdk = new FanoutClient(\n             connection2,\n             anchorWallet\n           );\n            fanoutAccount = await fanoutSdk.fetch<Fanout>(\n             fanout as PublicKey,\n             \n             Fanout\n           )\n           try {\n           // @ts-ignore\n setTotal(((new anchor.BN(fanoutAccount?.totalShares))).toNumber())\n // @ts-ignore\n   setStaked(((new anchor.BN(fanoutAccount?.totalStakedShares))).toNumber()/ 10 ** 9)\n   // @ts-ignore\n   setMembers(((new anchor.BN(fanoutAccount?.totalMembers))).toNumber())\n           }\n           catch (err){\n               console.log(err)\n           }\n        }, Math.random() * 10 * 1000 + 5000)\n    }\n    const refreshCandyMachineState = useCallback(\n        async (commitment: Commitment = 'confirmed') => {\n            if (!anchorWallet) {\n                return;\n            }\n\n            const connection = new Connection(props.rpcHost, commitment);\n\n            if (props.candyMachineId) {\n                try {\n                    const cndy = await getCandyMachineState(\n                        anchorWallet,\n                        props.candyMachineId,\n                        connection,\n                    );\n\n                    setCandyMachine(cndy);\n                    setItemsAvailable(cndy.state.itemsAvailable);\n                    setItemsRemaining(cndy.state.itemsRemaining);\n                    setItemsRedeemed(cndy.state.itemsRedeemed);\n\n                    var divider = 1;\n                    if (decimals) {\n                        divider = +('1' + new Array(decimals).join('0').slice() + '0');\n                    }\n\n                    // detect if using spl-token to mint\n                    if (cndy.state.tokenMint) {\n                        setPayWithSplToken(true);\n                        // Customize your SPL-TOKEN Label HERE\n                        // TODO: get spl-token metadata name\n                        setPriceLabel(splTokenName);\n                        setPrice(cndy.state.price.toNumber() / divider);\n                        setWhitelistPrice(cndy.state.price.toNumber() / divider);\n                    } else {\n                        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                    }\n\n\n                    // fetch whitelist token balance\n                    if (cndy.state.whitelistMintSettings) {\n                        setWhitelistEnabled(true);\n                        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                        setIsPresale(cndy.state.whitelistMintSettings.presale);\n                        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                            if (cndy.state.tokenMint) {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                            } else {\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                            }\n                        }\n\n                        let balance = 0;\n                        try {\n                            const tokenBalance =\n                                await props.connection.getTokenAccountBalance(\n                                    (\n                                        await getAtaForMint(\n                                            cndy.state.whitelistMintSettings.mint,\n                                            anchorWallet.publicKey,\n                                        )\n                                    )[0],\n                                );\n\n                            balance = tokenBalance?.value?.uiAmount || 0;\n                        } catch (e) {\n                            console.error(e);\n                            balance = 0;\n                        }\n                        if (commitment !== \"processed\") {\n                            setWhitelistTokenBalance(balance);\n                        }\n                        setIsActive(isPresale && !isEnded && balance > 0);\n\n                    } else {\n                        setWhitelistEnabled(false);\n                    }\n\n                    // end the mint when date is reached\n                    if (cndy?.state.endSettings?.endSettingType.date) {\n                        setEndDate(toDate(cndy.state.endSettings.number));\n                        if (\n                            cndy.state.endSettings.number.toNumber() <\n                            new Date().getTime() / 1000\n                        ) {\n                            setIsEnded(true);\n                            setIsActive(false);\n                        }\n                    }\n                    // end the mint when amount is reached\n                    if (cndy?.state.endSettings?.endSettingType.amount) {\n                        let limit = Math.min(\n                            cndy.state.endSettings.number.toNumber(),\n                            cndy.state.itemsAvailable,\n                        );\n                        setItemsAvailable(limit);\n                        if (cndy.state.itemsRedeemed < limit) {\n                            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                        } else {\n                            setItemsRemaining(0);\n                            cndy.state.isSoldOut = true;\n                            setIsEnded(true);\n                        }\n                    } else {\n                        setItemsRemaining(cndy.state.itemsRemaining);\n                    }\n\n                    if (cndy.state.isSoldOut) {\n                        setIsActive(false);\n                    }\n\n                    const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n                    const collectionPDAAccount = await connection.getAccountInfo(\n                        collectionPDA,\n                    );\n\n                    const txnEstimate =\n                        892 +\n                        (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n                        (cndy.state.tokenMint ? 66 : 0) +\n                        (cndy.state.whitelistMintSettings ? 34 : 0) +\n                        (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n                        (cndy.state.gatekeeper ? 33 : 0) +\n                        (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n                    setNeedTxnSplit(txnEstimate > 1230);\n                } catch (e) {\n                    if (e instanceof Error) {\n                        if (\n                            e.message === `Account does not exist ${props.candyMachineId}`\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        } else if (\n                            e.message.startsWith('failed to get info about account')\n                        ) {\n                            setAlertState({\n                                open: true,\n                                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                                severity: 'error',\n                                hideDuration: null,\n                            });\n                        }\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: `${e}`,\n                            severity: 'error',\n                            hideDuration: null,\n                        });\n                    }\n                    console.log(e);\n                }\n            } else {\n                setAlertState({\n                    open: true,\n                    message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n                    severity: 'error',\n                    hideDuration: null,\n                });\n            }\n        },\n        [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection],\n    );\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes + 1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\n        let remaining = itemsRemaining - qty;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - qty;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setSetupTxn(undefined);\n        setItemsRedeemed(itemsRedeemed + qty);\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"mainnet-beta\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        setIsMinting(false);\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async (\n        beforeTransactions: Transaction[] = [],\n        afterTransactions: Transaction[] = [],\n    ) => {\n        try {\n            if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n                setIsMinting(true);\n                let setupMint: SetupState | undefined;\n                if (needTxnSplit && setupTxn === undefined) {\n                    setAlertState({\n                        open: true,\n                        message: 'Please validate account setup transaction',\n                        severity: 'info',\n                    });\n                    setupMint = await createAccountsForMint(\n                        candyMachine,\n                        wallet.publicKey,\n                    );\n                    let status: any = {err: true};\n                    if (setupMint.transaction) {\n                        status = await awaitTransactionSignatureConfirmation(\n                            setupMint.transaction,\n                            props.txTimeout,\n                            props.connection,\n                            true,\n                        );\n                    }\n                    if (status && !status.err) {\n                        setSetupTxn(setupMint);\n                        setAlertState({\n                            open: true,\n                            message:\n                                'Setup transaction succeeded! You can now validate mint transaction',\n                            severity: 'info',\n                        });\n                    } else {\n                        setAlertState({\n                            open: true,\n                            message: 'Mint failed! Please try again!',\n                            severity: 'error',\n                        });\n                        return;\n                    }\n                }\n\n                const setupState = setupMint ?? setupTxn;\n                const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n                let mintResult = await mintOneToken(\n                    candyMachine,\n                    wallet.publicKey,\n                    mint,\n                    beforeTransactions,\n                    afterTransactions,\n                    setupState,\n                );\n\n                let status: any = {err: true};\n                let metadataStatus = null;\n                if (mintResult) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintResult.mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        true,\n                    );\n\n                    metadataStatus =\n                        await candyMachine.program.provider.connection.getAccountInfo(\n                            mintResult.metadataKey,\n                            'processed',\n                        );\n                    console.log('Metadata status: ', !!metadataStatus);\n                }\n\n                if (status && !status.err && metadataStatus) {\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                    refreshCandyMachineState('processed');\n                } else if (status && !status.err) {\n                    setAlertState({\n                        open: true,\n                        message:\n                            'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n                        severity: 'error',\n                        hideDuration: 8000,\n                    });\n                    refreshCandyMachineState();\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                    refreshCandyMachineState();\n                }\n            }\n        } catch (error: any) {\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (anchorWallet) {\n                const balance = await props.connection.getBalance(anchorWallet!.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [anchorWallet, props.connection]);\n\n    useEffect(() => {\n        refreshCandyMachineState();\n    }, [\n        anchorWallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale,\n        refreshCandyMachineState\n    ]); var [shares, setShares] = useState(\"1.38\");\n    var [Pot, setPot] = useState(0);\n\n    async function onChange(e: any){\n        e.preventDefault()\n        console.log(e.target.value)\n        setShares(e.target.value)\n        }\n   let mintPublicKey = new PublicKey(\"rainH85N1vCoerCi4cQ3w6mCf7oYUdrsTFtFzpaRwjL\")\n/*  async function all(){\n    if (wallet){    var fanoutSdk: FanoutClient;\n      fanoutSdk = new FanoutClient(\n        connection2  ,\n        // @ts-ignore\n        wallet\n    );\n  var ix3= await fanoutSdk.distributeAll(//{fanout,mint:WRAPPED_SOL_MINT,payer:wallet.publicKey})// .distributeTokenMember(\n  {\n  \n       \n    mint: new PublicKey(\"So11111111111111111111111111111111111111112\"),\n    fanout: fanout,\n    // @ts-ignore\n    payer: wallet.publicKey\n  \n  }\n  );\n  var ix4= await fanoutSdk.distributeAll(//{fanout,mint:WRAPPED_SOL_MINT,payer:wallet.publicKey})// .distributeTokenMember(\n    {\n    \n         \n      mint: mintPublicKey,\n      fanout: fanout,\n      // @ts-ignore\n      payer: wallet.publicKey\n    \n    }\n    );\n  }\n} */\n  async function claim(){\n    if (wallet){    var fanoutSdk: FanoutClient;\n        connection2 = new Connection('https://ssc-dao.genesysgo.net/', \"confirmed\");\n\n      fanoutSdk = new FanoutClient(\n        connection2  ,\n        // @ts-ignore\n        wallet\n    );\n  var ix3= await fanoutSdk.distributeToken(//{fanout,mint:WRAPPED_SOL_MINT,payer:wallet.publicKey})// .distributeTokenMember(\n  {\n  \n       \n    distributeForMint: false,\n    fanout: fanout,\n    membershipMint:mintPublicKey,\n    // @ts-ignore\n    member: wallet.publicKey,\n    // @ts-ignore\n    payer: wallet.publicKey\n  \n  }\n  );\n  \n  var ix4= await fanoutSdk.distributeToken(//{fanout,mint:WRAPPED_SOL_MINT,payer:wallet.publicKey})// .distributeTokenMember(\n    {\n    \n         \n      distributeForMint: true,\n      fanoutMint: mintPublicKey,\n      fanout: fanout,\n      membershipMint:mintPublicKey,\n      // @ts-ignore\n      member: wallet.publicKey,\n      // @ts-ignore\n      payer: wallet.publicKey\n    \n    }\n    ); \n}\n\n  }\n  async function doit(){\n  \n  if (wallet){\n  \n    var fanoutSdk: FanoutClient;\n    connection2 = new Connection('https://ssc-dao.genesysgo.net/', \"confirmed\");\n\n    fanoutSdk = new FanoutClient(\n      connection2,\n      // @ts-ignore\n      wallet\n  );\n\n  console.log( (parseFloat(shares) * 10 ** 9))\n  console.log( {\n            \n            shares:  (parseFloat(shares) * 10 ** 9),\n            // @ts-ignore\n            fanout: fanout,\n            membershipMint: mintPublicKey,\n           // @ts-ignore\n            member: wallet.publicKey,\n            // @ts-ignore\n            payer: wallet.publicKey\n        })\n  var  ixs = await fanoutSdk.stakeTokenMember(\n        {\n            \n            shares:  (parseFloat(shares) * 10 ** 9),\n            // @ts-ignore\n            fanout: fanout,\n            membershipMint: mintPublicKey,\n           // @ts-ignore\n            member: wallet.publicKey,\n            // @ts-ignore\n            payer: wallet.publicKey\n        }\n    );\n  \n  }\n  }\n  \n  /*\n  console.log(321)\n  const { info: tokenBonding2 } = useTokenBondingFromMint(mintPublicKey);\n  const { price: price2, loading: l2 } = useLivePrice(tokenBonding2?.publicKey);\n  if (price2){\n    if (!l2 && !isNaN(price2)){\n   // console.log(price2)\n    }\n  }\n  */\n  async function us(){\n  \n    if (wallet){\n      var fanoutSdk: FanoutClient;\n      connection2 = new Connection('https://ssc-dao.genesysgo.net/', \"confirmed\");\n\n      fanoutSdk = new FanoutClient(\n        connection2,\n        // @ts-ignore\n        wallet\n    );\n\n    \n    await fanoutSdk.unstakeTokenMember({\n        // @ts-ignore\n      fanout: fanout,\n      // @ts-ignore\n      member: wallet.publicKey,\n      // @ts-ignore\n      payer: wallet.publicKey\n  }\n  );\n    }\n  \n  }\n// yarn gh-pages -r git@github.com:staccDOTsol/DuYjPmjmWnYsuAhGU5RXceUoDMB1Nfonf8GkpQYzUUJU.git -b gh-pages -d build\n\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <br/>\n                \n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>{mintPublicKey.toBase58()} Hydra - it one of these, where degen is a https://app.strataprotocol.com/swap/DuYjPmjmWnYsuAhGU5RXceUoDMB1Nfonf8GkpQYzUUJU: degen, cope, prism, open, rain, grape</h2>\n                            <div>{members} </div> Members\n                            <div>{staked}  </div> Staked <div></div>\n                            <Button onClick={claim} >meCLAIM</Button>\n\n                            <Input  style={{color:\"black\", fontSize: \"30px;\", backgroundColor: \"grey\"}} type=\"text\" onInput={onChange} value={shares} />\n\n                            <Button  onClick={doit} >STAKEme</Button>\n\n                            <Button  onClick={us} >UNSTAKEALLme</Button>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"cool-cats.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                              <h3>You own {whitelistTokenBalance} WL\n                                mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\"}.</h3>}\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\n                              <h3>You are whitelisted and allowed to mint.</h3>}\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() && \n                            <div></div>\n}\n                            {wallet && isActive &&\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\n                            <br/>\n                            <MintButtonContainer>\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? \n(<div></div> ) : (\n                                    !wallet ? (\n                                        <ConnectButton>Connect Wallet</ConnectButton>\n                                    ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                        candyMachine?.state.gatekeeper &&\n                                        wallet.publicKey &&\n                                        wallet.signTransaction ? (\n                                            <GatewayProvider\n                                                wallet={{\n                                                    publicKey:\n                                                        wallet.publicKey ||\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                    //@ts-ignore\n                                                    signTransaction: wallet.signTransaction,\n                                                }}\n                                                // // Replace with following when added\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                                gatekeeperNetwork={\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                                } // This is the ignite (captcha) network\n                                                /// Don't need this for mainnet\n                                                clusterUrl={rpcUrl}\n                                                cluster={cluster}\n                                                options={{autoShowModal: false}}\n                                            >\n                                                <MintButton\n                                                    candyMachine={candyMachine}\n                                                    isMinting={isMinting}\n                                                    isActive={isActive}\n                                                    isEnded={isEnded}\n                                                    isSoldOut={isSoldOut}\n                                                    onMint={onMint}\n                                                />\n                                            </GatewayProvider>\n                                        ) : (\n                                            <MintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isEnded={isEnded}\n                                                isSoldOut={isSoldOut}\n                                                onMint={onMint}\n                                            />\n\n                                        ) :\n                                        <h1>Mint is private.</h1>\n                                )}\n                            </MintButtonContainer>\n                            <br/>\n                            {wallet && isActive && solanaExplorerLink &&\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on\n                                Solscan</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport { DEFAULT_TIMEOUT } from './connection';\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n    try {\n        const candyMachineId = new anchor.web3.PublicKey(\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\n        );\n\n        return candyMachineId;\n    } catch (e) {\n        console.log('Failed to construct CandyMachineId', e);\n        return undefined;\n    }\n};\n\nconst candyMachineId = getCandyMachineId();\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('mainnet-beta'),\n);\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={DEFAULT_TIMEOUT}\n                rpcHost={rpcHost}\n                network={network}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n    mint: anchor.web3.PublicKey,\n    buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n      CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n    wallet: anchor.web3.PublicKey,\n    gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n      [\n        wallet.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n        gatekeeperNetwork.toBuffer(),\n      ],\n      CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}